<launch>

  <arg name="x"/>
  <arg name="y"/>
  <arg name="z"/>
  <arg name="yaw"/>
  <arg name="move_destinations"/>
  <arg name="robot_specifier" default="" />
  <arg name="second_robot_specifier" default="" />
  <!-- Arguments -->
  <arg name="model" default="$(optenv TURTLEBOT3_MODEL burger)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="map_file" default="$(env PWD)/maps/reference_map.yaml"/>
  <arg name="base_dir" default="$(env PWD)" />

  <!-- Turtlebot3 -->
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="burger" />
    <arg name="multi_robot_name" value="$(arg robot_specifier)" /> <!-- Used as tf_prefix for robot state pulisher (transforms)-->
  </include>

  <!-- Map server -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>

  <!-- AMCL -->
  <include file="$(find turtlebot3_navigation)/launch/amcl.launch" />
  <param name="/$(arg robot_specifier)/amcl/global_frame_id" value="map" />
  <param name="/$(arg robot_specifier)/amcl/odom_frame_id" value="/$(arg robot_specifier)/odom" />
  <param name="/$(arg robot_specifier)/amcl/base_frame_id" value="/$(arg robot_specifier)/base_link" />
  <param name="/$(arg robot_specifier)/amcl/initial_pose_x" value="$(arg x)" />
  <param name="/$(arg robot_specifier)/amcl/initial_pose_y" value="$(arg y)" />
  <param name="/$(arg robot_specifier)/amcl/initial_pose_a" value="$(arg yaw)" />

  <!-- MOVE_BASE -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <remap from="scan" to="/$(arg robot_specifier)/scan"/>
    <remap from="odom" to="/$(arg robot_specifier)/odom"/>
    <remap from="cmd_vel" to="/$(arg robot_specifier)/cmd_vel"/>

    <param name="base_global_planner" value="global_planner/GlobalPlanner" />
    <rosparam file="$(env PWD)/yaml/global_planner.yaml" command="load" />

    <rosparam file="$(arg base_dir)/yaml/move_base.yaml" command="load" />
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <rosparam file="$(arg base_dir)/yaml/dwa_local_planner.yaml" command="load" />

    <rosparam file="$(arg base_dir)/yaml/common_costmap.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(arg base_dir)/yaml/global_costmap.yaml" command="load" />
    <param name="global_costmap/obstacle_layer/base_scan/topic" value="/$(arg robot_specifier)/scan"/>
    <param name="global_costmap/obstacle_layer/base_scan/sensor_frame" value="$(arg robot_specifier)/base_scan"/>
    <param name="global_costmap/robot_base_frame" value="$(arg robot_specifier)/base_link"/>
    <param name="global_costmap/global_frame" value="map"/>
    <param name="global_costmap/static_layer/map" value="/$(arg robot_specifier)/static_map"/>

    <rosparam file="$(arg base_dir)/yaml/common_costmap.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(arg base_dir)/yaml/local_costmap.yaml" command="load" />
    <param name="local_costmap/obstacle_layer/base_scan/topic" value="/$(arg robot_specifier)/scan"/>
    <param name="local_costmap/obstacle_layer/base_scan/sensor_frame" value="$(arg robot_specifier)/base_scan"/>
    <param name="local_costmap/robot_base_frame" value="$(arg robot_specifier)/base_link"/>
    <param name="local_costmap/global_frame" value="$(arg robot_specifier)/odom"/>
  </node>

  <!--<node pkg="goal_provider" type="goal_provider" name="goal_provider" output="screen">
    <param name="goals" value="$(arg move_destinations)" />
  </node>-->

<!-- GLOBAL_MANAGER -->
  <node pkg="global_manager" type="global_manager" name="global_manager" output="screen">
    <remap from="succeeded_goal" to="/succeeded_goal"/>
  </node>

  <!-- LOCAL_MANAGER -->
  <node pkg="local_manager" type="local_manager" name="local_manager" output="screen">
  </node>

  <!-- LOCAL_PATH_PLANNER -->
  <node pkg="local_path_planner" type="local_path_planner_node" name="local_path_planner" output="screen">
    <remap from="vision_pattern" to="/vision_pattern"/>
    <remap from="modified_occupancy_grid" to="/modified_occupancy_grid"/>
    <remap from="prob_grids" to="/prob_grids"/>
    <!-- <remap from ="amcl_pose" to = "amcl_pose"/>
    <remap from ="global_goal" to =s "global_goal"/> -->
  </node>


  <!-- DIRT_DETECTION -->
  <node pkg="dirt_detection" type="dirt_detection" name="dirt_detection" output="screen">
    <param name="robot_specifier" value="$(arg robot_specifier)"/>
    <!--<param name="second_robot_specifier" value="$(arg second_robot_specifier)"/>-->
    <remap from="/$(arg robot_specifier)/robot_pose" to="/$(arg second_robot_specifier)/robot_pose"/>
    <remap from="/$(arg robot_specifier)/detected_dirt" to="/detected_dirt"/>
  </node>

   <!-- ROBOT_POSE -->
  <node pkg="robot_pose_publisher" type="robot_pose_publisher" name="robot_pose_publisher" output="screen">
  <param name="robot_specifier" value="$(arg robot_specifier)"/>
  </node>

</launch>
